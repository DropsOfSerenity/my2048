;; Analyzed by ClojureScript 1.7.122
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name my2048.core, :imports nil, :requires {q quiescent.core, fw figwheel.client, cljs.core.async cljs.core.async, quiescent.core quiescent.core, events goog.events, figwheel.client figwheel.client, quiescent.dom quiescent.dom, string clojure.string, clojure.string clojure.string, goog.events goog.events, d quiescent.dom}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, dropping-buffer cljs.core.async, put! cljs.core.async}, :defs {board->tiles-to-render {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 58, :column 7, :end-line 58, :end-column 29, :arglists (quote ([board]))}, :name my2048.core/board->tiles-to-render, :variadic false, :file "src/my2048/core.cljs", :end-column 29, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board]))}, key-listener {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 180, :column 7, :end-line 180, :end-column 19, :arglists (quote ([ch]))}, :name my2048.core/key-listener, :variadic false, :file "src/my2048/core.cljs", :end-column 19, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, combine-adjacent {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 118, :column 7, :end-line 118, :end-column 23, :arglists (quote ([coll]))}, :name my2048.core/combine-adjacent, :variadic false, :file "src/my2048/core.cljs", :end-column 23, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, right-slide {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([row]))}, :name my2048.core/right-slide, :variadic false, :file "src/my2048/core.cljs", :end-column 18, :method-params ([row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([row]))}, get-nil-indexes {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 21, :column 7, :end-line 21, :end-column 22, :arglists (quote ([coll]))}, :name my2048.core/get-nil-indexes, :variadic false, :file "src/my2048/core.cljs", :end-column 22, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, build-tile {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([val]))}, :name my2048.core/build-tile, :variadic false, :file "src/my2048/core.cljs", :end-column 17, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, add-random-tile {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 45, :column 7, :end-line 45, :end-column 22, :arglists (quote ([board]))}, :name my2048.core/add-random-tile, :variadic false, :file "src/my2048/core.cljs", :end-column 22, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board]))}, random-nil-index {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 29, :column 7, :end-line 29, :end-column 23, :arglists (quote ([coll]))}, :name my2048.core/random-nil-index, :variadic false, :file "src/my2048/core.cljs", :end-column 23, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll]))}, keycode->symbol {:name my2048.core/keycode->symbol, :file "src/my2048/core.cljs", :line 168, :column 1, :end-line 168, :end-column 21, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 168, :column 6, :end-line 168, :end-column 21}}, board-size {:name my2048.core/board-size, :file "src/my2048/core.cljs", :line 13, :column 1, :end-line 13, :end-column 16, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 13, :column 6, :end-line 13, :end-column 16}, :doc "How tall and wide the board is, in this case 4x4"}, Game {:name my2048.core/Game, :file "src/my2048/core.cljs", :line 85, :column 1, :end-line 85, :end-column 21, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 85, :column 17, :end-line 85, :end-column 21}, :doc ""}, down-slide {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 142, :column 7, :end-line 142, :end-column 17, :arglists (quote ([col]))}, :name my2048.core/down-slide, :variadic false, :file "src/my2048/core.cljs", :end-column 17, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, up-slide {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 135, :column 7, :end-line 135, :end-column 15, :arglists (quote ([col]))}, :name my2048.core/up-slide, :variadic false, :file "src/my2048/core.cljs", :end-column 15, :method-params ([col]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([col]))}, key-chan {:name my2048.core/key-chan, :file "src/my2048/core.cljs", :line 178, :column 1, :end-line 178, :end-column 14, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 178, :column 6, :end-line 178, :end-column 14}}, initial-board {:name my2048.core/initial-board, :file "src/my2048/core.cljs", :line 17, :column 1, :end-line 17, :end-column 19, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 17, :column 6, :end-line 17, :end-column 19}, :doc "Our initial empty board state."}, left-slide {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 122, :column 7, :end-line 122, :end-column 17, :arglists (quote ([row]))}, :name my2048.core/left-slide, :variadic false, :file "src/my2048/core.cljs", :end-column 17, :method-params ([row]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([row]))}, combine {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 105, :column 8, :end-line 105, :end-column 15, :private true, :arglists (quote ([r] [r result])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([r] [r result]), :arglists ([r] [r result]), :arglists-meta (nil nil)}}, :private true, :name my2048.core/combine, :variadic false, :file "src/my2048/core.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([r] [r result]), :arglists ([r] [r result]), :arglists-meta (nil nil)}, :method-params ([r] [r result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists ([r] [r result])}, run-once {:name my2048.core/run-once, :file "src/my2048/core.cljs", :line 207, :column 1, :end-line 207, :end-column 18, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 207, :column 10, :end-line 207, :end-column 18}}, keyword->event-type {:name my2048.core/keyword->event-type, :file "src/my2048/core.cljs", :line 163, :column 1, :end-line 163, :end-column 25, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 163, :column 6, :end-line 163, :end-column 25}, :doc "Maps a sensible keyword to an event type"}, combine-tiles {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 40, :column 7, :end-line 40, :end-column 20, :arglists (quote ([first second]))}, :name my2048.core/combine-tiles, :variadic false, :file "src/my2048/core.cljs", :end-column 20, :method-params ([first second]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([first second]))}, render {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 195, :column 7, :end-line 195, :end-column 13, :arglists (quote ([board]))}, :name my2048.core/render, :variadic false, :file "src/my2048/core.cljs", :end-column 13, :method-params ([board]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([board]))}, slide {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 145, :column 7, :end-line 145, :end-column 12, :arglists (quote ([board dir]))}, :name my2048.core/slide, :variadic false, :file "src/my2048/core.cljs", :end-column 12, :method-params ([board dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([board dir]))}, Grid {:name my2048.core/Grid, :file "src/my2048/core.cljs", :line 76, :column 1, :end-line 76, :end-column 21, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 76, :column 17, :end-line 76, :end-column 21}, :doc ""}, on-js-reload {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 202, :column 7, :end-line 202, :end-column 19, :arglists (quote ([]))}, :name my2048.core/on-js-reload, :variadic false, :file "src/my2048/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, index->css-position {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 52, :column 7, :end-line 52, :end-column 26, :arglists (quote ([idx]))}, :name my2048.core/index->css-position, :variadic false, :file "src/my2048/core.cljs", :end-column 26, :method-params ([idx]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([idx]))}, pad-with-nils {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 115, :column 8, :end-line 115, :end-column 21, :private true, :arglists (quote ([n coll]))}, :private true, :name my2048.core/pad-with-nils, :variadic false, :file "src/my2048/core.cljs", :end-column 21, :method-params ([n coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([n coll]))}, handle-move {:protocol-inline nil, :meta {:file "/Users/jschiff/src/clojurescript/my2048/src/my2048/core.cljs", :line 155, :column 7, :end-line 155, :end-column 18, :arglists (quote ([board dir]))}, :name my2048.core/handle-move, :variadic false, :file "src/my2048/core.cljs", :end-column 18, :method-params ([board dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([board dir]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, q quiescent.core, quiescent.core quiescent.core, d quiescent.dom, quiescent.dom quiescent.dom}, :cljs.analyzer/constants {:seen #{:tile-inner :down :key :keydown :else :new :pos :val :recur :className :up :keyup :grid-row :render :slide :col :wait :right :add :tile-container :classes :old :board :row :left}, :order [:val :key :new :old :row :col :classes :pos :className :board :grid-row :tile-container :tile-inner :keyup :keydown :left :up :down :right :render :recur :wait :add :slide :else]}, :doc nil}